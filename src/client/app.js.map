{"version":3,"file":"app.js","sourceRoot":"","sources":["app.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport { Component } from \"react\"\nimport { getGif } from \"./api\"\nimport * as ioClient from \"socket.io-client\"\nimport {\n  BROADCAST_GAME_STATE,\n  NEW_BOARDCARD,\n  NEW_PLAYER,\n  SELECTION,\n  SET_ROOM,\n  SET_SOCKET_ID,\n  START_DAMN_GAME\n} from \"../constants\"\n\nconst getQueryParams = window => {\n  const search = window.location.search.substring(1)\n  const params = {}\n  const pairs = search.split(\"&\")\n  pairs.forEach(e => {\n    const pair = e.split(\"=\")\n    params[pair[0]] = pair[1]\n  })\n  return params\n}\n\nconst turnMessage = \"It's your turn!  Pick your favorite` answer above!\"\nconst notTurnMessage = \"Pick a .gif below as your answer!\"\n\nconst isNull = val => val === null\nconst deNuld = (prev, curr) => isNull(prev) && !isNull(curr)\nfunction classes(...args): any {\n  return args.filter(e => e)\n}\ninterface State {\n  board: Array<{ cardUrl: string; socketId: string }>\n  question: string\n  players: Array<{ name: string; socketId: string; score: number }>\n  selector: number\n  selectedCardSocketId: string\n  playerSocketId: string\n  playerName: string\n  hand: Array<{ cardUrl: string }>\n  playedCard: string\n}\n\n// State held in query params: roomId, og\nclass App extends Component<{}, State> {\n  state = {\n    // global\n    board: [], // { cardUrl, socketId }\n    question: \"\",\n    players: [], // { name, socketId, score }\n    selector: 0,\n    selectedCardSocketId: null,\n    // this player\n    playerSocketId: null,\n    playerName: \"Some dumb fucking name\",\n    hand: [], // { cardUrl }\n    playedCard: null\n  }\n  socket = ioClient(\"http://localhost:5000\")\n  isPlayerOne = () =>\n    this.state.players[0] &&\n    this.state.players[0].socketId === this.state.playerSocketId\n  isCurrentlySelector = () =>\n    this.state.players[this.state.selector] &&\n    this.state.players[this.state.selector].socketId ===\n      this.state.playerSocketId\n\n  componentDidMount() {\n    this.socket.on(SET_SOCKET_ID, this.setSocketId)\n    this.socket.on(NEW_PLAYER, this.handleNewPlayer)\n    this.socket.on(BROADCAST_GAME_STATE, this.handleNewPlayerSyncGameState)\n    this.socket.on(START_DAMN_GAME, this.handleStartDamnGame)\n    this.socket.on(NEW_BOARDCARD, playedCard => {\n      this.setState({ playedCard })\n    })\n    this.socket.on(SELECTION, winnerSocketId => {\n      const players = this.state.players.map(player =>\n        player.playerSocketId === winnerSocketId\n          ? { ...player, score: player.score + 1 }\n          : player\n      )\n      this.setState({ players, selectedCardSocketId: winnerSocketId })\n    })\n  }\n\n  deal = async () => {\n    const newGifs = await Promise.all([\n      getGif(),\n      getGif(),\n      getGif(),\n      getGif(),\n      getGif()\n    ])\n    const hand = newGifs.map((res: any) => res.data.img_url)\n    this.setState({ hand })\n  }\n\n  setSocketId = playerSocketId => {\n    this.setState(\n      {\n        playerSocketId,\n        players: [\n          {\n            name: this.state.playerName,\n            socketId: playerSocketId,\n            score: 0\n          }\n        ]\n      },\n      () => {\n        this.socket.emit(SET_ROOM, getQueryParams(window)[\"roomId\"])\n      }\n    )\n  }\n  // socket handlers\n  handleNewPlayer = newPlayer => {\n    console.log(\"newPlayer\", this.state.players)\n    const { players, selector, question } = this.state\n    const newPlayers = [newPlayer, ...players]\n    this.setState({\n      players: newPlayers\n    })\n    if (this.isPlayerOne()) {\n      this.socket.emit(BROADCAST_GAME_STATE, {\n        players: newPlayers,\n        selector,\n        question\n      })\n    }\n  }\n  handleNewPlayerSyncGameState = gameState => this.setState(gameState)\n  handleStartDamnGame = question => {\n    this.setState({ question }, this.deal)\n  }\n  // click handlers\n  onClickStartDamnGame = () => this.socket.emit(START_DAMN_GAME)\n  onClickHandCard = clickedCard => {\n    this.setState(({ playedCard }) => {\n      if (isNull(playedCard)) {\n        return { playedCard: clickedCard }\n      }\n    })\n  }\n  onClickBoardCard = card => {\n    if (this.isCurrentlySelector() && isNull(this.state.selectedCardSocketId)) {\n      this.socket.emit(SELECTION, card.socketId)\n    }\n  }\n\n  // updates\n  updated_playerPlayedACard = pPlayedCard =>\n    deNuld(pPlayedCard, this.state.playedCard)\n\n  componentDidUpdate(pProps, pState) {\n    if (this.updated_playerPlayedACard(pState.playedCard)) {\n      // note this doesn't affect the board, this player is still waiting to receive his card for board by socket\n      state => this.socket.emit(NEW_BOARDCARD, state.playedCard)\n    }\n  }\n\n  getWinOrLoseText = () => {\n    const { selectedCardSocketId, players, playerSocketId } = this.state\n    if (!selectedCardSocketId) {\n      return null\n    }\n    const winner = players.find(\n      player => player.socketId === selectedCardSocketId\n    )\n    if (this.isCurrentlySelector()) {\n      return \"Terrible choice, \" + winner.name + \" wins.\"\n    }\n    if (winner.socketId === playerSocketId) {\n      return \"You win.  You must be a terrible person...\"\n    }\n    return winner.name + \" wins, you're a loser.\"\n  }\n\n  render() {\n    const {\n      question,\n      players,\n      selectedCardSocketId,\n      playerSocketId,\n      playerName,\n      hand,\n      board\n    } = this.state\n    const winOrLoseText = this.getWinOrLoseText()\n    return (\n      <section>\n        <header>\n          <p className=\"title\">\n            .Gifs\n            <br /> Against\n            <br /> Humanity.\n          </p>\n          <p className=\"worse\">...A game for horribler people.</p>\n        </header>\n        <section className=\"scoreContainer\">\n          {players.map(player => (\n            <p key={player.playerSocketId} className=\"score1 score\">\n              {player.name}: {player.score}\n            </p>\n          ))}\n        </section>\n        <section className=\"board\">\n          {winOrLoseText && <p className=\"winOrLose\">{winOrLoseText}</p>}\n          {board.map(({ cardUrl, socketId }) => (\n            <Card\n              key={cardUrl}\n              cardUrl={cardUrl}\n              onClick={this.onClickBoardCard}\n              bounce={selectedCardSocketId === socketId}\n              socketId={socketId}\n            />\n          ))}\n        </section>\n        <section className=\"question\">\n          {!question && (\n            <button onClick={this.onClickStartDamnGame}>Start Game</button>\n          )}\n          {question}\n        </section>\n        <section className=\"turnDisplay\">\n          {this.isCurrentlySelector() ? turnMessage : notTurnMessage}\n        </section>\n        <section className=\"hand\">\n          {hand.map(cardUrl => (\n            <Card\n              key={cardUrl}\n              cardUrl={cardUrl}\n              socketId={playerSocketId}\n              onClick={this.onClickHandCard}\n            />\n          ))}\n        </section>\n        <p className=\"playerName\">You are {playerName}.</p>\n        <footer>\n          <div className=\"footerBackground\" />\n        </footer>\n      </section>\n    )\n  }\n}\n\nexport interface CardProps {\n  cardUrl: string\n  socketId: string\n  bounce?: boolean\n  onClick: (string) => void\n}\n\nconst Card = ({ cardUrl, socketId, bounce, onClick }: CardProps) => (\n  <img\n    className={classes(\"handcard\", bounce && \"bounce\")}\n    src={cardUrl}\n    onClick={() => onClick({ cardUrl, socketId })}\n  />\n)\n\nexport default App\n"]}