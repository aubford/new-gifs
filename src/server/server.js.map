{"version":3,"file":"server.js","sourceRoot":"","sources":["server.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,OAAO,MAAM,SAAS,CAAA;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAA;AAC1C,OAAO,EACL,oBAAoB,EACpB,aAAa,EACb,UAAU,EACV,SAAS,EACT,QAAQ,EACR,aAAa,EACb,eAAe,EAChB,MAAM,cAAc,CAAA;AAErB,MAAM,CAAC,MAAM,MAAM,GAAG,OAAO,EAAE,CAAA;AAC/B,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;AAC3C,MAAM,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAA;AAErC,MAAM,gBAAgB,GAAG,GAAG,EAAE;IAC5B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;AACrD,CAAC,CAAA;AAED,EAAE,CAAC,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC,EAAE;IAC3B,IAAI,MAAM,CAAA;IACV,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,CAAC,CAAA;IACrC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE;QACvB,MAAM,GAAG,EAAE,CAAA;QACX,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;YACvB,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE;gBAC3C,cAAc,EAAE,MAAM,CAAC,EAAE;gBACzB,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,CAAC;aACT,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,MAAM,CAAC,EAAE,CAAC,oBAAoB,EAAE,SAAS,CAAC,EAAE;QAC1C,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,oBAAoB,EAAE,SAAS,CAAC,CAAA;IACnE,CAAC,CAAC,CAAA;IAEF,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE,GAAG,EAAE;QAC9B,OAAO,CAAC,GAAG,CAAC,2CAA2C,EAAE,MAAM,CAAC,CAAA;QAChE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,gBAAgB,EAAE,CAAC,CAAA;IAC7D,CAAC,CAAC,CAAA;IAEF,aAAa;IACb,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,UAAU,CAAC,EAAE;QACpC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC,CAAA;IAC/C,CAAC,CAAC,CAAA;IAEF,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;QACzB,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAA;QAClC,UAAU,CAAC,GAAG,EAAE;YACd,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,gBAAgB,EAAE,CAAC,CAAA;QACzD,CAAC,EAAE,IAAI,CAAC,CAAA;IACV,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA;AAEF,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACrB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAA,CAAC,sBAAsB;AAC3D,CAAC,CAAC,CAAA","sourcesContent":["import * as express from 'express'\nimport { questions } from './questionBank'\nimport {\n  BROADCAST_GAME_STATE,\n  NEW_BOARDCARD,\n  NEW_PLAYER,\n  SELECTION,\n  SET_ROOM,\n  SET_SOCKET_ID,\n  START_DAMN_GAME\n} from '../constants'\n\nexport const server = express()\nconst http = require('http').Server(server)\nconst io = require('socket.io')(http)\n\nconst generateQuestion = () => {\n  return Math.floor(Math.random() * questions.length)\n}\n\nio.on('connection', socket => {\n  let roomId\n  socket.emit(SET_SOCKET_ID, socket.id)\n  socket.on(SET_ROOM, id => {\n    roomId = id\n    socket.join(roomId, () => {\n      socket.to(roomId).broadcast.emit(NEW_PLAYER, {\n        playerSocketId: socket.id,\n        name: 'New Player',\n        score: 0\n      })\n    })\n  })\n\n  socket.on(BROADCAST_GAME_STATE, gameState => {\n    socket.to(roomId).broadcast.emit(BROADCAST_GAME_STATE, gameState)\n  })\n\n  socket.on(START_DAMN_GAME, () => {\n    console.log('************START_DAMN_GAME**************', roomId)\n    socket.to(roomId).emit(START_DAMN_GAME, generateQuestion())\n  })\n\n  // funny shit\n  socket.on(NEW_BOARDCARD, playedCard => {\n    io.to(roomId).emit(NEW_BOARDCARD, playedCard)\n  })\n\n  socket.on(SELECTION, res => {\n    io.to(roomId).emit(SELECTION, res)\n    setTimeout(() => {\n      io.to(roomId).emit(START_DAMN_GAME, generateQuestion())\n    }, 2500)\n  })\n})\n\nhttp.listen(5000, () => {\n  console.log('listening on *:5000') // eslint-disable-line\n})\n"]}